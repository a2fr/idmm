[comment encoding = UTF-8 /]
[module PetriNet2Tina('http://petrinet')]

[comment Generation de la syntaxe Tina à partir d'un modèle de processus /]


[template public toTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.nom + '.net', false, 'UTF-8')]

net [aPetriNet.nom/]
[for (place : Place | aPetriNet.PetriNetElement.getPlaces())]
pl [place.nomPlace/] ([place.jetons/])
[/for]
[for (transition : Transition | aPetriNet.PetriNetElement.getTransitions())]
tr [transition.nomTransition/] [getArcsSources(transition.getSources())/] -> [getArcsCibles(transition.getCibles())/]
[/for]

[/file]
[/template]


[query public getPlaces(elements : PetriNetElement) : OrderedSet(Place) = 
	elements->select( e | e.oclIsTypeOf(Place))
		->collect( e | e.oclAsType(Place))
		->asOrderedSet()
/]

[query public getTransitions(elements : PetriNetElement) : OrderedSet(Transition) = 
	elements->select( e | e.oclIsTypeOf(Transition))
		->collect( e | e.oclAsType(Transition))
		->asOrderedSet()
/]

[query public getSources(transition:Transition) : OrderedSet(Arc) = 
	transition.linksToPredecessors->select( e | e.oclIsTypeOf(Arc))
		->collect( e | e.oclAsType(Arc))
		->asOrderedSet()
/]

[query public getCibles(transition:Transition) : OrderedSet(Arc) = 
	transition.linksToSuccessors->select( e | e.oclIsTypeOf(Arc))
		->collect( e | e.oclAsType(Arc))
		->asOrderedSet()
/]
[template public getArcsSources(arcs : OrderedSet(Arc)) post (trim())]

[for (arc : Arc | arcs)]
    [let places : OrderedSet(Place) = arc.successor->select(p | p.oclIsTypeOf(Place))->collect(p | p.oclAsType(Place))->asOrderedSet()]
        [for (place : Place | places)]
            [place.nomPlace/] [if (arc.readonly)]?[arc.poids/][elseif (arc.poids > 1)]*[arc.poids/][else] [/if]
        [/for]
[/let]
[/for]
[/template]

[template public getArcsCibles(arcs : OrderedSet(Arc)) post (trim())]

[for (arc : Arc | arcs)]
    [let places : OrderedSet(Place) = arc.predecessor->select(p | p.oclIsTypeOf(Place))->collect(p | p.oclAsType(Place))->asOrderedSet()]
        [for (place : Place | places)]
[place.nomPlace/] [if (arc.readonly)]?[arc.poids/][elseif (arc.poids > 1)]*[arc.poids/][else] [/if]
        [/for]
[/let]
[/for]
[/template]
